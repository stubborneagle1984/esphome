esphome:
  name: esphome-finestrasoffitto
  friendly_name: esphome-finestrasoffitto

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  logs:
    mpu6050: INFO
    sensor: INFO
    fan_roof_window_motor: INFO
    i2c.arduino: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "WSCUirtgeB6zuKIIRfqUMbyK+LBMusHT996lcgQeUc8="

ota:
  - platform: esphome
    password: "7fe89391d079323436d9eface0c3ab5c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  fast_connect: true
  manual_ip:
    static_ip: 10.4.1.184
    gateway: 10.4.1.254
    subnet: 255.255.255.0    

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Finestrasoff Fallback Hotspot"
    password: "i0o3Np3l4RHM"

captive_portal:
    
#web_server:
#   port: 80
#   local: True

# Example configuration entry
debug:
  update_interval: 5s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

i2c:
  sda: GPIO21  # in quello rotto 19
  scl: GPIO22  # in quello rotto 18 
  scan: true  
  frequency: 10kHz #ex 50khz
  id: i2c_bus  # Assegna un ID al bus I2C

globals:
  - id: motor_running
    type: bool
    restore_value: yes  # Mantiene lo stato tra i riavvii
    initial_value: "false"

  - id: motor_direction_forward
    type: bool
    restore_value: no  # Non è necessario memorizzarlo tra i riavvii
    initial_value: "true"  # Direzione iniziale predefinita

  - id: hysteresis_triggered_open
    type: bool
    restore_value: yes  # Mantiene lo stato tra i riavvii
    initial_value: "false"

  - id: hysteresis_triggered_close
    type: bool
    restore_value: yes  # Mantiene lo stato tra i riavvii
    initial_value: "false"

#  - id: i2c_attempts
#    type: int
#    restore_value: no
#    initial_value: "0"

#  - id: max_attempts
#    type: int
#    restore_value: no
#    initial_value: "5"  # Numero massimo di tentativi

#  - id: mpu6050_found
#    type: bool
#    restore_value: no
#    initial_value: "false"

  - id: inclinaz_desiderata_norm
    type: float
    restore_value: yes  # Mantiene lo stato tra i riavvii
    initial_value: "0.0"  # Posizione iniziale (0 = chiusa, 1 = aperta)

substitutions:
  INCLINAZ_CHIUSO: "18"
  INCLINAZ_CHIUSO_ISTERESI: "17"
  INCLINAZ_APERTO: "0"
  INCLINAZ_APERTO_ISTERESI: "1"
  TOLLERANZA_CONDIZ_ARRIVO: "0.5"

interval:
  - interval: 30s
    then:
      - lambda: |-
          if (id(mpu6050_xyz).is_failed()) {
            ESP_LOGW("i2c", "MPU6050 non risponde. Tentativo di recupero del bus I2C...");
            Wire.begin(21, 22);  // Reinizializza il bus con i pin corretti
            Wire.endTransmission();  // Termina eventuali trasmissioni bloccate

            // Ricontrolla se il sensore risponde
            if (id(mpu6050_xyz).is_failed()) {
              ESP_LOGE("mpu6050", "Recupero fallito. Sarebbe il caso di riavviare...");
              //ESP.restart();  // Riavvia solo se il recupero fallisce
            } else {
              ESP_LOGI("mpu6050", "Recupero I2C riuscito, sensore risponde di nuovo.");
            }
          } else {
            ESP_LOGI("i2c", "MPU6050 risponde correttamente");
          }
          
sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""  

  - platform: mpu6050
    address: 0x68
    update_interval: 1s # ex 250ms    
    id: mpu6050_xyz
    accel_x:
      name: "Accelerazione asse X"
      unit_of_measurement: "m/s²"
      icon: "mdi:axis-arrow"         
      id: accel_x
      filters:
        - offset: -1.67 # ex -0.45                     
    accel_y:
      name: "Accelerazione asse Y"       
      unit_of_measurement: "m/s²"
      icon: "mdi:axis-arrow"              
      id: accel_y
      filters:
        - offset: -0.18 # ex -0.1      
    accel_z:
      name: "Accelerazione asse Z"
      unit_of_measurement: "m/s²"
      icon: "mdi:axis-arrow"           
      id: accel_z          
      filters:
        - offset: 0.50 # ex -0.35 # ex 0.9
    
  - platform: template
    id: pitch
    name: "Inclinazione finestra"
    unit_of_measurement: "°"
    icon: "mdi:airplane-takeoff"
    accuracy_decimals: 1
    lambda: |-
      float INCLINAZ_CHIUSO_FL = atof("${INCLINAZ_CHIUSO}");
      float INCLINAZ_APERTO_FL = atof("${INCLINAZ_APERTO}");
      float TOLLERANZA_CONDIZ_ARRIVO_FL = atof("${TOLLERANZA_CONDIZ_ARRIVO}");

      float inclinaz_attuale = (atan(-1 * id(accel_x).state / sqrt(pow(id(accel_y).state, 2) + pow(id(accel_z).state, 2))) * 180 / PI);
      // Filtra i valori fuori range
      if (inclinaz_attuale < -20 || inclinaz_attuale > 20) {
        return id(pitch).state; // Mantieni l'ultimo valore valido
      }

      // Monitora la condizione di arresto se il motorino si sta muovendo
      if(id(motor_running) == true){
                
        // Calcola l'inclinazione target
        float inclinaz_desiderata = INCLINAZ_CHIUSO_FL - (id(inclinaz_desiderata_norm) * (INCLINAZ_CHIUSO_FL - INCLINAZ_APERTO_FL));  // Da "INCLINAZ_CHIUSO_FL" a "INCLINAZ_APERTO_FL"
        ESP_LOGI("pitch", "Inclinazione attuale: %.1f°, desiderata: %.1f°", inclinaz_attuale, inclinaz_desiderata);

        // Verifica se il valore è arrivato (entro la tolleranza di TOLLERANZA_CONDIZ_ARRIVO_FL)
        if (abs(inclinaz_desiderata - inclinaz_attuale) < TOLLERANZA_CONDIZ_ARRIVO_FL) {  // Tolleranza di ±TOLLERANZA_CONDIZ_ARRIVO_FL gradi        
            auto call = id(fan_roof_window_motor).turn_off();
            call.perform();        
          ESP_LOGI("pitch", "Inclinazione desiderata %.1f° raggiunta, motore fermato.", inclinaz_desiderata);
        } 
      }

      return inclinaz_attuale;
    update_interval: 1s # ex 250ms
    on_value_range:
      # Controllo chiusura completa 
      - above: ${INCLINAZ_CHIUSO}  # Leggero margine per evitare instabilità
        then:
          - if:
              condition:
                and:
                  - lambda: "return id(motor_running);"
                  - lambda: "return !id(hysteresis_triggered_close);"
              then:
                - fan.turn_off: fan_roof_window_motor
                - logger.log:
                    format: "Accelerometro: Motore fermato (finestra completamente chiusa, beccheggio maggiore di ${INCLINAZ_CHIUSO}°)"
                    level: INFO
                - globals.set:
                    id: hysteresis_triggered_close
                    value: "true"
      # Reset isteresi chiusura completa 
      - below: ${INCLINAZ_CHIUSO_ISTERESI}
        then:
          - globals.set:
              id: hysteresis_triggered_close
              value: "false"
      # Controllo apertura completa 
      - below: ${INCLINAZ_APERTO}   # Leggero margine per evitare instabilità
        then:
          - if:
              condition:
                and:
                  - lambda: "return id(motor_running);"
                  - lambda: "return !id(hysteresis_triggered_open);"
              then:
                - fan.turn_off: fan_roof_window_motor
                - logger.log:
                    format: "Accelerometro: Motore fermato (finestra completamente aperta, beccheggio minore di ${INCLINAZ_APERTO}°)"
                    level: INFO
                - globals.set:
                    id: hysteresis_triggered_open
                    value: "true"
      # Reset isteresi apertura completa 
      - above: ${INCLINAZ_APERTO_ISTERESI}
        then:
          - globals.set:
              id: hysteresis_triggered_open
              value: "false"           

  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1 ohm
    current:
      name: "INA219 Current"
      id: ina219_current    
      on_value_range:
        - above: 0.35
          then:
            - fan.turn_off: fan_roof_window_motor
            - logger.log:
                format: "Amperometro (%f A): Inviato comando di spegnimento al motorino della finestra (apertura massima raggiunta)"
                args: ['id(ina219_current).state']
                level: INFO      
                tag: ina219_current
        - below: -0.35
          then:
            - fan.turn_off: fan_roof_window_motor
            - logger.log:
                format: "Amperometro (%f A): Inviato comando di spegnimento al motorino della finestra (posizione di chiusura raggiunta)"
                args: ['id(ina219_current).state']
                level: INFO  
                tag: ina219_current    
    power:
      name: "INA219 Power"
      id: ina219_power 
    bus_voltage:
      name: "INA219 Bus Voltage"
      id: ina219_bus_voltage
    shunt_voltage:
      name: "INA219 Shunt Voltage"
      id: ina219_shunt_voltage
    max_voltage: 2.0V
    max_current: 0.5A
    update_interval: 1s # ex 1s # ex 200ms

#  - platform: adc
#    pin: 36
#    name: "Corrente assorbita motorino"
#    update_interval: 200ms
#    attenuation: auto
#    accuracy_decimals: 2
#    device_class: current
#    unit_of_measurement: A
#    filters:
#      - lambda: |-
#          return (x -2.5) / 0.066;

  - platform: adc
    pin: GPIO33
    name: "Voltmetro: Sensore comando esterno"
    id: adc_voltmeter_external_command_sensor 
    device_class: "voltage"
    state_class: "measurement"   
    entity_category: "diagnostic"
    unit_of_measurement: "V"
    update_interval: 200ms
    accuracy_decimals: 2
    attenuation: auto    
    on_value_range:
# nota: non posso usare il tasto "stop" del telecomando per interrompere un comando inviato con la domotica: se dovessi aprire la finestra senza il telecomando continuerei comuque ad avere 0V su questo pin e non cambierebbe nulla quando si preme il pulsante
      - below: 0.9
        then:
          - fan.turn_off: fan_roof_window_motor
          - logger.log:
              format: "Voltmetro: Inviato comando di stop al motorino della finestra (comando ricevuto dal telecomando)"
              level: INFO  
              tag: adc_voltmeter_external_command_sensor          
      - above: 1.0
        below: 1.5
        then:
          - fan.turn_on: 
              id: fan_roof_window_motor
              direction: forward
          - logger.log:
              format: "Voltmetro: Inviato comando di apertura al motorino della finestra (comando ricevuto dal telecomando?)"
              level: INFO      
              tag: adc_voltmeter_external_command_sensor
      - above: 2.5
        then:
          - fan.turn_on: 
              id: fan_roof_window_motor
              direction: reverse
          - logger.log:
              format: "Voltmetro: Inviato comando di chiusura al motorino della finestra (comando ricevuto dal telecomando o dal sensore pioggia)"
              level: INFO  
              tag: adc_voltmeter_external_command_sensor      

# - platform: template
#   name: "Sensore comando esterno: template"
#   device_class: precipitation
#   lambda: |-
#     if (id(voltmeter_external_command_sensor).state > 2.7) {
#       ESP_LOGD("INFO", "Rilevanto comando esterno di apertura finestra");
#       return 1;
#     } else if (id(voltmeter_external_command_sensor).state < -2.7) {
#       ESP_LOGD("INFO", "Rilevanto comando esterno di chiusura finestra");        
#       return -1;
#     } else {
#       return 0;
#     }     
#    update_interval: 200ms

output:
  - platform: ledc
    pin: GPIO26
    id: motor_reverse_pin
  - platform: ledc
    pin: GPIO27
    id: motor_forward_pin
fan:
  - platform: hbridge
    id: fan_roof_window_motor
    pin_a: motor_reverse_pin
    pin_b: motor_forward_pin
    # enable_pin: motor_enable
    decay_mode: slow   # slow decay mode (coasting) or fast decay (braking).    
    entity_category: "diagnostic"  # Nasconde il fan dalla dashboard principale
    on_turn_on:      
      - globals.set:
          id: motor_running
          value: "true"      
      - logger.log:
          format: "Motorino finestra acceso!" 
          level: INFO
          tag: fan_roof_window_motor                     
    on_turn_off:
      - globals.set:
          id: motor_running
          value: "false"            
      - logger.log:
          format: "Motorino finestra spento!" 
          level: INFO    
          tag: fan_roof_window_motor
cover:
  - platform: template
    name: "Finestra Soffitto"
    id: finestra_soffitto_cover
    optimistic: false
    has_position: true
    lambda: |-
        static bool restituito_stato_iniziale_cover = false;  // Variabile statica usata all'avvio dell'esp32 per restituire lo stato iniziale della cover 
        static float inclinaz_norm_precedente = 0.0;  // Memorizza l'ultima posizione calcolata
        float INCLINAZ_CHIUSO_FL = atof("${INCLINAZ_CHIUSO}");
        float INCLINAZ_APERTO_FL = atof("${INCLINAZ_APERTO}");

        // Calcola l'inclinazione attuale normalizzata
        float inclinaz_norm_attuale = (INCLINAZ_CHIUSO_FL - id(pitch).state) / (INCLINAZ_CHIUSO_FL - INCLINAZ_APERTO_FL); // Normalizza da "INCLINAZ_CHIUSO_FL" a "INCLINAZ_APERTO_FL"
        //ESP_LOGD("finestra_soffitto_cover",  "inclinaz_norm_attuale %.2f, inclinaz_norm_precedente= %.2f", inclinaz_norm_attuale, inclinaz_norm_precedente);                
        if (isnan(inclinaz_norm_precedente)) {
          ESP_LOGW("sensor_check", "Il valore di inclinaz_norm_precedente è NaN!");
          delay(10000);
        }

        if (!restituito_stato_iniziale_cover) {
          ESP_LOGD("finestra_soffitto_cover", "qui");                
          // Se siamo all'avvio dell'esp32 restituiamo lo stato iniziale della cover 
          restituito_stato_iniziale_cover = true;
          inclinaz_norm_precedente = inclinaz_norm_attuale;  // Aggiorna l'ultima inclinazione memorizzata 
          return inclinaz_norm_attuale;
        }  

        // Se il motorino è in movimento  
        if (id(motor_running)) {                         

          // Limita variazioni minime (ad esempio 0.02)
          if (abs(inclinaz_norm_attuale - inclinaz_norm_precedente) < 0.02) {
            return inclinaz_norm_precedente;  // Non aggiornare se la variazione è troppo piccola
          } 
          ESP_LOGD("finestra_soffitto_cover", " %.2f, inclinaz_norm_attuale=%.2f, inclinaz_norm_precedente=%.2f", abs(inclinaz_norm_attuale - inclinaz_norm_precedente), inclinaz_norm_attuale, inclinaz_norm_precedente);                
          inclinaz_norm_precedente = inclinaz_norm_attuale;  // Aggiorna l'ultima inclinazione memorizzata 

          // Assicurati che al di sotto\sopra di una certa soglia la finestra venga considerata aperta\chiusa
          if (inclinaz_norm_attuale < 0.1) {
            return 0.0;
          } else if (inclinaz_norm_attuale > 0.9) {
            return 1.0;
          }
          return inclinaz_norm_attuale;    

        }
        return inclinaz_norm_precedente;          

    open_action:
      - if:
          condition:
            lambda: |-
                float INCLINAZ_APERTO_FL = atof("${INCLINAZ_APERTO}");  
                return id(pitch).state <= INCLINAZ_APERTO_FL;  // Già completamente aperta
          then:
            - logger.log:
                format: "Comando di apertura ignorato: finestra già completamente aperta"
                level: INFO
                tag: finestra_soffitto_cover      
          else:
            - lambda: |-
                ESP_LOGI("finestra_soffitto_cover", "Posizione richiesta: Apertura completa");
      
                auto call = id(fan_roof_window_motor).turn_on();
                call.set_direction(FanDirection::FORWARD);        
                call.perform();
      
                // Imposta la posizione desiderata
                id(inclinaz_desiderata_norm) = 1;          
    close_action:
      - if:
          condition:
            lambda: |-
                float INCLINAZ_CHIUSO_FL = atof("${INCLINAZ_CHIUSO}");            
                return id(pitch).state >= INCLINAZ_CHIUSO_FL;  // Già completamente chiusa
          then:
            - logger.log:
                format: "Comando di chiusura ignorato: finestra già completamente chiusa"
                level: INFO
                tag: finestra_soffitto_cover      
          else:
            - lambda: |-
                ESP_LOGI("finestra_soffitto_cover", "Posizione richiesta: Chiusura completa");
      
                auto call = id(fan_roof_window_motor).turn_on();
                call.set_direction(FanDirection::REVERSE);        
                call.perform();
      
                // Imposta la posizione desiderata
                id(inclinaz_desiderata_norm) = 0;     
    stop_action:
      - fan.turn_off: fan_roof_window_motor
      - logger.log:
          format: "Finestra fermata manualmente"
          level: INFO
          tag: finestra_soffitto_cover      
    position_action:
      - lambda: |-
          float INCLINAZ_CHIUSO_FL = atof("${INCLINAZ_CHIUSO}");  
          float INCLINAZ_APERTO_FL = atof("${INCLINAZ_APERTO}");  
          float inclinaz_desiderata = INCLINAZ_CHIUSO_FL - (pos * (INCLINAZ_CHIUSO_FL - INCLINAZ_APERTO_FL));  // Calcola l'inclinazione desiderata
          ESP_LOGI("finestra_soffitto_cover", "Posizione richiesta: %.1f (inclinazione desiderata: %.1f°)", pos, inclinaz_desiderata);

          // Determina la direzione del motore
          auto call = id(fan_roof_window_motor).turn_on();
          if (inclinaz_desiderata > id(pitch).state) {
            call.set_direction(FanDirection::REVERSE);        
          } else if (inclinaz_desiderata < id(pitch).state) {
            call.set_direction(FanDirection::FORWARD);        
          }
          call.perform();

          // Imposta la posizione desiderata
          id(inclinaz_desiderata_norm) = pos;          