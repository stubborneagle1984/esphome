esphome:
  name: esphome-con-antenna
  friendly_name: esphome-con-antenna

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  logs:
    mpu6050: INFO
    sensor: INFO
    roof_window_motor: INFO


# Enable Home Assistant API
api:
  encryption:
    key: "A3y4Qp3lsMoJlTmAaKMtRltILbKwpyTMLBaySNPb5Dk="

ota:
  password: "beba92a4fb540398e82ac44832a421b5"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  fast_connect: true
  manual_ip:
    static_ip: 10.4.1.184
    gateway: 10.4.1.254
    subnet: 255.255.255.0    

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-con-antenna"
    password: "75ObNtLwvREr"

captive_portal:
    
#web_server:
#   port: 80
#   local: True

# Example configuration entry
debug:
  update_interval: 5s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true  
  frequency: 50kHz

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""  

  - platform: mpu6050
    address: 0x68
    update_interval: 250ms    
    id: mpu6050_xyz
    accel_x:
      name: "accel X"
      id: accel_x
      filters:
        - offset: -0.45            
#      filters:
#        - calibrate_polynomial:
#          degree: 2
#          datapoints:
#            # Map 0.0 (from sensor) to 0.0 (true value)
#            - 0.0 -> 0.0
#            - 10.0 -> 12.1
#            - 13.0 -> 14.0            
    accel_y:
      name: "accel Y"          
      id: accel_y
      filters:
        - offset: -0.1      
    accel_z:
      id: accel_z    
      name: "accel z"
      filters:
        - offset: 0.9      

  - platform: template
    id: roll
    name: pan1roll
    accuracy_decimals: 1
    lambda: |-
      return  (atan( id(accel_y).state / sqrt( pow( id(accel_x).state , 2) + pow( id(accel_z).state , 2) ) ) * 180 / PI) ;
    update_interval: 250ms

  - platform: template
    id: pitch
    name: pan1pitch
    accuracy_decimals: 1
    lambda: |-
      return  (atan(-1 * id(accel_x).state / sqrt(pow(id(accel_y).state, 2) + pow(id(accel_z).state, 2))) * 180 / PI);
    update_interval: 250ms
#    on_value_range:
#      - above: 44.0
#        then:
#          - fan.turn_off: roof_window_motor
#          - logger.log:
#              format: "Accelerometro: Inviato comando di spegnimento al motorino della finestra"
#              level: INFO
#      - below: 0.0
#        then:
#          - fan.turn_off: roof_window_motor
#          - logger.log:
#              format: "Accelerometro: Inviato comando di spegnimento al motorino della finestra"
#             level: INFO

  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1 ohm
    current:
      name: "INA219 Current"
      id: ina219_current    
      on_value_range:
        - above: 0.35
          then:
            - fan.turn_off: roof_window_motor
            - logger.log:
                format: "Amperometro (%f A): Inviato comando di spegnimento al motorino della finestra (apertura massima raggiunta). "
                args: ['id(ina219_current).state']
                level: INFO      
                tag: ina219_current
        - below: -0.35
          then:
            - fan.turn_off: roof_window_motor
            - logger.log:
                format: "Amperometro (%f A): Inviato comando di spegnimento al motorino della finestra (posizione di chiusura raggiunta)"
                args: ['id(ina219_current).state']
                level: INFO  
                tag: ina219_current    
    power:
      name: "INA219 Power"
      id: ina219_power 
    bus_voltage:
      name: "INA219 Bus Voltage"
      id: ina219_bus_voltage
    shunt_voltage:
      name: "INA219 Shunt Voltage"
      id: ina219_shunt_voltage
    max_voltage: 2.0V
    max_current: 0.5A
    update_interval: 200ms

#  - platform: adc
#    pin: 36
#    name: "Corrente assorbita motorino"
#    update_interval: 200ms
#    attenuation: auto
#    accuracy_decimals: 2
#    device_class: current
#    unit_of_measurement: A
#    filters:
#      - lambda: |-
#          return (x -2.5) / 0.066;

  - platform: adc
    pin: GPIO33
    name: "Voltmetro: Sensore comando esterno"
    id: adc_voltmeter_external_command_sensor 
    device_class: "voltage"
    state_class: "measurement"   
    entity_category: "diagnostic"
    unit_of_measurement: "V"
    update_interval: 200ms
    accuracy_decimals: 2
    attenuation: auto    
    on_value_range:
# nota: non posso usare il tasto "stop" del telecomando per interrompere un comando inviato con la domotica: se dovessi aprire la finestra senza il telecomando continuerei comuque ad avere 0V su questo pin e non cambierebbe nulla quando si preme il pulsante
      - below: 0.9
        then:
          - fan.turn_off: roof_window_motor
          - logger.log:
              format: "Voltmetro: Inviato comando di stop al motorino della finestra (comando ricevuto dal telecomando)"
              level: INFO  
              tag: adc_voltmeter_external_command_sensor          
      - above: 1.0
        below: 1.5
        then:
          - fan.turn_on: 
              id: roof_window_motor
              direction: forward
          - logger.log:
              format: "Voltmetro: Inviato comando di apertura al motorino della finestra (comando ricevuto dal telecomando?)"
              level: INFO      
              tag: adc_voltmeter_external_command_sensor
      - above: 2.5
        then:
          - fan.turn_on: 
              id: roof_window_motor
              direction: reverse
          - logger.log:
              format: "Voltmetro: Inviato comando di chiusura al motorino della finestra (comando ricevuto dal telecomando o dal sensore pioggia)"
              level: INFO  
              tag: adc_voltmeter_external_command_sensor      

# - platform: template
#   name: "Sensore comando esterno: template"
#   device_class: precipitation
#   lambda: |-
#     if (id(voltmeter_external_command_sensor).state > 2.7) {
#       ESP_LOGD("INFO", "Rilevanto comando esterno di apertura finestra");
#       return 1;
#     } else if (id(voltmeter_external_command_sensor).state < -2.7) {
#       ESP_LOGD("INFO", "Rilevanto comando esterno di chiusura finestra");        
#       return -1;
#     } else {
#       return 0;
#     }     
#    update_interval: 200ms

output:
  - platform: ledc
    pin: GPIO26
    id: motor_reverse_pin
  - platform: ledc
    pin: GPIO27
    id: motor_forward_pin
fan:
  - platform: hbridge
    id: roof_window_motor
    name: "Motorino finestra soffitto"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    # enable_pin: motor_enable
    decay_mode: slow   # slow decay mode (coasting) or fast decay (braking).    
    on_turn_on:
        - logger.log:
            format: "Motorino finestra acceso!"
            level: INFO
            tag: roof_window_motor 
#      - if:
#          condition:
#            lambda: 'return (id(pitch).state > 0 && id(pitch).state <= 44);'
#          then:
#            - logger.log:
#                format: "Motorino finestra acceso!"
#                level: INFO    
#          else:
#            - fan.turn_off: roof_window_motor
#            - logger.log:
#                format: "L'inclinazione della finestra impedisce l'avvio del motorino!"
#                level: INFO              
    on_turn_off:
      - logger.log:
          format: "Motorino finestra spento!"
          level: INFO    
          tag: roof_window_motor
